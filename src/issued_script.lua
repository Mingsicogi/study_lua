---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by minseok.
--- DateTime: 2023/02/26 10:49 PM
---

local redis = require 'redis'
local client = redis.connect('127.0.0.1', 6379)

local app_id_limit_per_second = 5
local ip_rate_limit_per_second = 20
local game_cd_rate_limit_per_second = 100

local rule_id = "rule_id_123"
local ip = "127.0.0.1"
local game_cd = "AAA"
local app_id = "app_id_123"

local rate = tonumber(10)
local capacity = tonumber(10000000)
local now = tonumber(1677419928)
local requested = tonumber(10)

local allowed_num = 0

--- 전달 받은 redis key의 request counting
local function updateRequestCountIfKeyDataExist(...)
    for i,v in ipairs {...} do
        local request_count = client:incr(v)
        if request_count == 1 then
            client:expire(v, 100)
        end
    end
end

--- bucket algorithm 을 이용해 uri 별 rate limit 체크
local function isAllowByRuleIdApplyBucketAlgorithm(rule_id, rate, capacity, now, requested)
    -- rule_id 를 기준으로 버킷 알고리증을 판단하기 위한 값 조회
    local last_tokens = tonumber(client:get(rule_id))
    if last_tokens == nil then
        last_tokens = capacity
    end

    local redis_key = rule_id .. '.timestamp'
    local last_refreshed = tonumber(client:get(redis_key))
    if last_refreshed == nil then
        last_refreshed = 0
    end

    local delta = math.max(0, now-last_refreshed)
    local filled_tokens = math.min(capacity, last_tokens+(delta*rate))
    local allowed = filled_tokens >= requested
    local new_tokens = filled_tokens

    local fill_time = capacity/rate
    local ttl = math.floor(fill_time*2)

    if allowed then
        new_tokens = filled_tokens - requested
    end

    client:setex("tokens_key", ttl, new_tokens)
    client:setex("timestamp_key", ttl, now)

    return allowed
end

--- app_id 가 존재하고, app_id 별 request가 rate limit 허용치가 보다 작을 경우
local result
if app_id ~= nil and #app_id > 0 then
    local app_id_request_count = client:incr(app_id)
    if app_id_request_count == 1 or app_id_request_count <= app_id_limit_per_second then
        client:expire(app_id, 1)
        updateRequestCountIfKeyDataExist(ip, game_cd)

        if isAllowByRuleIdApplyBucketAlgorithm(rule_id, rate, capacity, now, requested) then
            allowed_num = 1
            print('isAllowByRuleIdApplyBucketAlgorithm true')
            result = { allowed_num, 0 }
        else
            print('isAllowByRuleIdApplyBucketAlgorithm false')
            result = { allowed_num, 0 }
        end
    end
end

print('Finished!')
print(result)